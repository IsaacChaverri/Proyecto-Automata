<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Flag Variables
transition_is_double = false;
transition_is_cycle = false;
//Position Variables
arrow_start_x = 0;
arrow_start_y = 0;
arrow_end_x = 0;
arrow_end_y = 0;
circle_angle = 0;
//Image Variables
original_arrow_size = 15;
arrow_size = original_arrow_size;
cycle_arrow_size_offset = 5;
var state_radius = sprite_get_width(spr_state)/2;
circle_radius = state_radius*0.75;
//Other
current_state = "PLACING";
state_1 = noone;
state_2 = noone;
transition_values = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update double transitions
if(transition_is_double){
    var destroyed_transition = id;
    var other_double_transition = noone;
    with(obj_state){
        if(id != other.state_1){
            var transitions_list_size = ds_list_size(transitions_list);
            for(var i=0;i&lt;transitions_list_size;i++){
                var temp_transition = ds_list_find_value(transitions_list,i);
                with(temp_transition){
                    if(state_1 == destroyed_transition.state_2 and state_2 == destroyed_transition.state_1){
                        other_double_transition = id;
                    }
                }
            }
        }
    }
    with(other_double_transition){
        transition_is_double = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete from state 1 transitions list
with(state_1){
    var transition_index = ds_list_find_index(transitions_list,other.id);
    if(transition_index != undefined){
        ds_list_delete(transitions_list,transition_index);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Transition Values
with(transition_values){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if transition is cycle
if(current_state == "PLACING"){
    if(scr_mouse_hovering_object(obj_state,false,false) == state_1){
        transition_is_cycle = true
        arrow_size = original_arrow_size-cycle_arrow_size_offset;
    }else{
        transition_is_cycle = false;
        arrow_size = original_arrow_size;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>transition_is_cycle</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State
switch(current_state){
    case "PLACING":
        //Update arrow positions
        arrow_start_x = state_1.x;
        arrow_start_y = state_1.y;
        arrow_end_x = mouse_x;
        arrow_end_y = mouse_y;
        //Calculate angles
        var angle = point_direction(arrow_start_x,arrow_start_y,arrow_end_x,arrow_end_y);
        var start_offset_angle = angle;
        //Adjust arrows
        var radius = state_1.radius;
        var start_x_offset = lengthdir_x(radius,start_offset_angle);
        var start_y_offset = lengthdir_y(radius,start_offset_angle);
        arrow_start_x = state_1.x+start_x_offset;
        arrow_start_y = state_1.y+start_y_offset;
        //Listen for gestures
        switch(CURRENT_GESTURE){
            case "OFF":
                //Place transition
                var hovered_state = scr_mouse_hovering_object(obj_state,false,true);
                var transition_already_exists = false;
                with(obj_transition){
                    if(id != other.id and state_1 == other.state_1 and state_2 == hovered_state){
                        transition_already_exists = true;
                    }
                }
                if(hovered_state != noone and not transition_already_exists){
                    scr_create_number_dial_window(id,hovered_state,false);
                }else{
                    instance_destroy();
                }
                break;
        }
        break;
    case "PLACED":
        //Update arrow positions
        arrow_start_x = state_1.x;
        arrow_start_y = state_1.y;
        arrow_end_x = state_2.x;
        arrow_end_y = state_2.y;
        //Calculate angles
        var angle = point_direction(arrow_start_x,arrow_start_y,arrow_end_x,arrow_end_y);
        var start_offset_angle = angle;
        var end_offset_angle = angle+180;
        if(transition_is_double){
            start_offset_angle = angle+45;
            end_offset_angle = angle+135;
        }
        //Adjust arrows
        var radius = state_1.radius;
        var start_x_offset = lengthdir_x(radius,start_offset_angle);
        var start_y_offset = lengthdir_y(radius,start_offset_angle);
        arrow_start_x = state_1.x+start_x_offset;
        arrow_start_y = state_1.y+start_y_offset;
        var end_x_offset = lengthdir_x(radius,end_offset_angle);
        var end_y_offset = lengthdir_y(radius,end_offset_angle);
        arrow_end_x = state_2.x+end_x_offset;
        arrow_end_y = state_2.y+end_y_offset;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Position
x = arrow_start_x;
y = arrow_start_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State
switch(current_state){
    case "PLACING":
        //Update Position
        circle_angle = point_direction(state_1.x,state_1.y,mouse_x,mouse_y);
        var radius = state_1.radius;
        var x_offset = lengthdir_x(radius,circle_angle);
        var y_offset = lengthdir_y(radius,circle_angle);
        x = state_1.x+x_offset;
        y = state_1.y+y_offset;
        //Listen for gestures
        switch(CURRENT_GESTURE){
            case "OFF":
                var hovered_state = scr_mouse_hovering_object(obj_state,false,true);
                var transition_already_exists = false;
                with(obj_transition){
                    if(id != other.id and state_1 == other.state_1 and state_2 == hovered_state){
                        transition_already_exists = true;
                    }
                }
                if(not transition_already_exists){
                    scr_create_number_dial_window(id,state_1,false);
                }else{
                    instance_destroy();
                }
                break;
        }
        break;
    case "PLACED":
        //Update Position
        var radius = state_1.radius;
        var x_offset = lengthdir_x(radius,circle_angle);
        var y_offset = lengthdir_y(radius,circle_angle);
        x = state_1.x+x_offset;
        y = state_1.y+y_offset;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>transition_is_cycle</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Arrow
var arrow_color = c_black;
if(state_1.automata_handler.selected_object == id){
    arrow_color = c_blue;
}
var original_color = draw_get_color();
draw_set_color(arrow_color);
draw_arrow(x,y,arrow_end_x,arrow_end_y,arrow_size);
draw_set_color(original_color);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cycle Transition
//Circle
var circle_x = x;
var circle_y = y;
var circle_color = c_black;
if(state_1.automata_handler.selected_object == id){
    circle_color = c_blue;
}
var circle_outline = true;
draw_circle_colour(circle_x,circle_y,circle_radius,circle_color,circle_color,circle_outline);
//Arrow
var state_radius = state_1.radius;
var angle_offset = radtodeg(arcsin((circle_radius/2)/state_radius))*2;
var arrow_position_angle = circle_angle+angle_offset;
var arrow_x_offset = lengthdir_x(state_radius,arrow_position_angle);
var arrow_y_offset = lengthdir_y(state_radius,arrow_position_angle);
arrow_end_x = state_1.x+arrow_x_offset;
arrow_end_y = state_1.y+arrow_y_offset;
var arrow_start_x_offset = lengthdir_x(arrow_size,circle_angle);
var arrow_start_y_offset = lengthdir_y(arrow_size,circle_angle);
arrow_start_x = arrow_end_x+arrow_start_x_offset;
arrow_start_y = arrow_end_y+arrow_start_y_offset;

var arrow_color = c_black;
if(state_1.automata_handler.selected_object == id){
    arrow_color = c_blue;
}
var original_color = draw_get_color();
draw_set_color(arrow_color);
draw_arrow(arrow_start_x,arrow_start_y,arrow_end_x,arrow_end_y,arrow_size);
draw_set_color(original_color);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
