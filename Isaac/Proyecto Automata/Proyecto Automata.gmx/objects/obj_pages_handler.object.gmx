<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pages_handler</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilize Variables

//State
scr_initialize_state();
//Physics Variables
swipe_friction = 0.25;
swipe_horizontal_friction = swipe_friction;
swipe_vertical_friction = swipe_friction;
page_swipe_max_speed = 100;
page_swipe_min_speed = 50;
//Position Variables
pages_x = 0;
//Other Variables
gesture_state = "OFF";
pages_list = ds_list_create();
current_page = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State Counter
switch(state.counter){
    case 0:
        //Create Pages
        var pages_data_list_size = ds_list_size(PAGES_DATA_LIST);
        for(var i=0;i&lt;pages_data_list_size;i++){
            var temp_page_data = ds_list_find_value(PAGES_DATA_LIST,i);
            var new_page_x = x+(sprite_width/2)+(i*sprite_width);
            var new_page_y = y;
            var new_page_depth = depth-1;
            var new_page = scr_instance_create_depth(new_page_x,new_page_y,new_page_depth,obj_page);
            with(new_page){
                page_data = temp_page_data;
            }
            ds_list_add(pages_list,new_page);
        }
        //Set Current Page
        var first_page = ds_list_find_value(pages_list,0);
        current_page = first_page;
        //Create Pages Box
        var pages_box_x = x+(sprite_width/2);
        var pages_box_height = sprite_get_height(spr_pages_box);
        var pages_box_y = y+sprite_height-(pages_box_height/2);
        var pages_box_depth = depth-10;
        pages_box = scr_instance_create_depth(pages_box_x,pages_box_y,pages_box_depth,obj_pages_box);
        with(pages_box){
            pages_handler = other.id;
            pages_list = other.pages_list;
        }
        //Go to current administrator page
        if(CURRENT_USER_DATA.type == "Administrator"){
            var current_user_page = noone;
            var pages_list_size = ds_list_size(pages_list);
            for(var i=0;i&lt;pages_list_size;i++){
                var temp_page = ds_list_find_value(pages_list,i);
                if(temp_page.page_data.creator_user_data.email == CURRENT_USER_DATA.email){
                    current_user_page = temp_page;
                }
            }
            var pages_x_difference = current_user_page.x-current_page.x;
            pages_x -= pages_x_difference;
            current_page = current_user_page;
        }
        
        state.counter++;
        break;
    case 1:
        switch(gesture_state){
            case "OFF":
                switch(CURRENT_GESTURE){
                    case "TOUCH":
                        touch_mouse_x = mouse_x;
                        touch_mouse_y = mouse_y;
                        gesture_state = "TOUCH";
                        break;
                }
                break;
            case "TOUCH":
                switch(CURRENT_GESTURE){
                    case "OFF":
                        gesture_state = "OFF";
                        break;
                    case "DRAG":
                        dragging_direction = "Horizontal";
                        var drag_x_distance = abs(mouse_x-touch_mouse_x);
                        var drag_y_distance = abs(mouse_y-touch_mouse_y);
                        if(drag_y_distance &gt; drag_x_distance){
                            dragging_direction = "Vertical";
                        }
                        old_mouse_x = mouse_x;
                        old_mouse_y = mouse_y;
                        gesture_state = "DRAG";
                        break;
                }
                break;
            case "DRAG":
                switch(dragging_direction){
                    case "Horizontal":
                        switch(CURRENT_GESTURE){
                            case "OFF":
                                destination_page = noone;
                                var left_threshold = x+(sprite_width/3);
                                var right_threshold = x+sprite_width-(sprite_width/3);
                                if(current_page.x &lt; left_threshold or current_page.x &gt; right_threshold){
                                    var drag_direction = 1;
                                    if(current_page.x &lt; left_threshold){
                                        drag_direction = -1;
                                    }
                                    var current_page_index = ds_list_find_index(pages_list,current_page);
                                    var destination_page_index = current_page_index-drag_direction;
                                    destination_page = ds_list_find_value(pages_list,destination_page_index);
                                }
                                if(destination_page == undefined or destination_page == noone){
                                    destination_page = current_page;
                                }
                                pages_x_start = pages_x;
                                var destination_page_destination_x = x+(sprite_width/2);
                                var destination_page_difference = destination_page.x-destination_page_destination_x;
                                pages_x_destination = pages_x_start-destination_page_difference;
                                gesture_state = "SWIPE_PAGES";
                                break;
                            case "SWIPE":
                                var swipe_horizontal_speed = SWIPE_HORIZONTAL_SPEED;
                                var swipe_direction = sign(swipe_horizontal_speed);
                                var current_page_index = ds_list_find_index(pages_list,current_page);
                                var destination_page_index = current_page_index-swipe_direction;
                                destination_page = ds_list_find_value(pages_list,destination_page_index);
                                if(destination_page != undefined and destination_page != noone){
                                    pages_x_start = pages_x;
                                    var destination_page_destination_x = x+(sprite_width/2);
                                    var destination_page_difference = destination_page.x-destination_page_destination_x;
                                    pages_x_destination = pages_x_start-destination_page_difference;
                                    gesture_state = "SWIPE_PAGES";
                                }else{
                                    gesture_state = "OFF";
                                }
                                break;
                        }
                        pages_x += mouse_x-old_mouse_x;
                        break;
                    case "Vertical":
                        switch(CURRENT_GESTURE){
                            case "OFF":
                                gesture_state = "OFF";
                                break;
                            case "SWIPE":
                                gesture_state = "SWIPE_LEVELS";
                                swipe_vertical_speed = SWIPE_VERTICAL_SPEED;
                                break;
                        }
                        current_page.level_buttons_y += mouse_y-old_mouse_y;
                        break;
                }
                old_mouse_x = mouse_x;
                old_mouse_y = mouse_y;
                break;
            case "SWIPE_LEVELS":
                current_page.level_buttons_y += swipe_vertical_speed;
                swipe_vertical_speed = scr_approach(swipe_vertical_speed,0,swipe_vertical_friction);
                if(round(swipe_vertical_speed) == 0){
                    swipe_vertical_speed = 0;
                    gesture_state = "OFF";
                }
                switch(CURRENT_GESTURE){
                    case "TOUCH":
                        touch_mouse_x = mouse_x;
                        touch_mouse_y = mouse_y;
                        gesture_state = "TOUCH";
                        break;
                }
                break;
            case "SWIPE_PAGES":
                pages_x = scr_wave_approach(pages_x_start,pages_x_destination,pages_x,page_swipe_max_speed,page_swipe_min_speed,false);
                if(round(pages_x) == pages_x_destination){
                    pages_x = pages_x_destination;
                    current_page = destination_page;
                    gesture_state = "OFF";
                }
                break;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Page Positions
var pages_max_x = 0;
var pages_min_x = 0;
var pages_list_size = ds_list_size(pages_list);
if(pages_list_size &gt; 1){
    var first_page = ds_list_find_value(pages_list,0);
    var last_page = ds_list_find_value(pages_list,pages_list_size-1);
    pages_min_x = -abs(last_page.x-first_page.x);
    
}
pages_x = clamp(pages_x,pages_min_x,pages_max_x);

for(var i=0;i&lt;pages_list_size;i++){
    var temp_page = ds_list_find_value(pages_list,i);
    temp_page.x = temp_page.xstart+pages_x;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
