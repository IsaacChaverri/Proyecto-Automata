<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_state</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Flag Variables
state_is_final = false;
//Image Variables
image_speed = 0;
radius = sprite_xoffset;
//Text Variables
text_font = fnt_arial_18;
//Other Variables
current_state = "OFF";
letter = "";
automata_handler = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create transition list
transitions_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return Used Letter
with(automata_handler){
    var deleted_letter_insert_index = 0;
    var deleted_letter_backup_index = ds_list_find_index(letters_list_backup,other.letter);
    var unused_letters_list_size = ds_list_size(unused_letters_list);
    for(var i=0;i&lt;unused_letters_list_size;i++){
        var temp_unused_letter = ds_list_find_value(unused_letters_list,i);
        var temp_unused_letter_backup_index = ds_list_find_index(letters_list_backup,temp_unused_letter);
        if(temp_unused_letter_backup_index &gt; deleted_letter_backup_index){
            break;
        }else{
            deleted_letter_insert_index++;
        }
    }
    ds_list_insert(unused_letters_list,deleted_letter_insert_index,other.letter);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Instances
//My transitions
for(var i=0;i&lt;ds_list_size(transitions_list);i++){
    var temp_transition = ds_list_find_value(transitions_list,i);
    with(temp_transition){
        instance_destroy();
    }
    i--;
}
//Transitions pointing me
with(obj_state){
    if(id != other.id){
        for(var i=0;i&lt;ds_list_size(transitions_list);i++){
            var temp_transition = ds_list_find_value(transitions_list,i);
            if(temp_transition.state_2 == other.id){
                with(temp_transition){
                    instance_destroy();
                }
                i--;
            }
        }
    }
}
//Start Arrow
var destroyed_state = id;
with(automata_handler){
    with(start_arrow){
        if(first_state == destroyed_state){
            instance_destroy();
            other.start_arrow = noone;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State
switch(current_state){
    case "OFF":
        //Listen for touch
        switch(CURRENT_GESTURE){
            case "TOUCH":
                if(scr_mouse_hovering_object(obj_state,false,false) == id){
                    current_state = "TOUCH";
                    automata_handler.selected_object = id;
                }
                break;
        }
        break;
    case "TOUCH":
        switch(CURRENT_GESTURE){
            case "OFF":
                current_state = "OFF";
                break;
            case "DRAG":
                current_state = "DRAG";
                if(GESTURE_IS_DOUBLE){
                    new_transition = scr_instance_create_depth(0,0,depth,obj_transition);
                    with(new_transition){
                        state_1 = other.id;
                    }
                }
                break;
            case "TAP":
                if(GESTURE_IS_DOUBLE){
                    //Make simultaneous states final/not final
                    var new_state_is_final = not state_is_final;
                    simultaneous_states_list = scr_find_simultaneous_states_list(id);
                    var simultaneous_states_list_size = ds_list_size(simultaneous_states_list);
                    for(var i=0;i&lt;simultaneous_states_list_size;i++){
                        var temp_state = ds_list_find_value(simultaneous_states_list,i);
                        with(temp_state){
                            state_is_final = new_state_is_final;
                        }
                    }
                    current_state = "OFF"
                }
                break;
        }
        break;
    case "DRAG":
        if(GESTURE_IS_DOUBLE){
            switch(CURRENT_GESTURE){
                case "OFF":
                    current_state = "OFF";
                    break;
            }
        }else{
            //Update State Position
            x = mouse_x;
            y = mouse_y;
            //Clamp Inside Automata Handler Area
            var automata_handler_left_border = automata_handler.x+(sprite_width/2);
            var automata_handler_right_border = automata_handler.x+automata_handler.sprite_width-(sprite_width/2);
            var automata_handler_up_border = automata_handler.y+(sprite_height/2);
            var automata_handler_down_border = automata_handler.y+automata_handler.sprite_height-(sprite_height/2);
            x = clamp(x,automata_handler_left_border,automata_handler_right_border);
            y = clamp(y,automata_handler_up_border,automata_handler_down_border);
            //Place State
            switch(CURRENT_GESTURE){
                case "OFF":
                    current_state = "OFF";
                    break;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Sprite
//Sprite Index
if(state_is_final){
    sprite_index = spr_state_final;
}else{
    sprite_index = spr_state;
}
//Image Index
if(automata_handler.selected_object == id){
    image_index = 1;
}else{
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sate

//Choose Color
var color = c_white;
if(automata_handler.selected_object == id){
    color = c_aqua;
}
//Self
draw_self();
//Letter
scr_setup_write(text_font,fa_center,fa_middle,c_black);
var text = letter;
var text_color = color;
var text_alpha = 1;
draw_text_colour(x,y,text,text_color,text_color,text_color,text_color,text_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
