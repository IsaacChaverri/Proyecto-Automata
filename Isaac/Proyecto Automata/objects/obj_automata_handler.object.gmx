<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_automata_handler</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Other Variables
current_state = "OFF";
selected_object = noone;
start_arrow = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Lists
//Letter Lists
letters_list_backup = ds_list_create();
ds_list_add(letters_list_backup,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z");
unused_letters_list = ds_list_create();
ds_list_copy(unused_letters_list,letters_list_backup);
//State Lists
state_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State
var touching_nothing = true;
if(scr_mouse_hovering_object(obj_state,false,false) != noone){
    touching_nothing = false;
}
if(scr_mouse_hovering_object(obj_transition_values,false,false) != noone){
    touching_nothing = false;
}
switch(current_state){
    case "OFF":
        if(CURRENT_GESTURE == "TOUCH" and touching_nothing){
            if(scr_mouse_hovering_object(id,false,false) != noone){
                selected_object = noone;
                current_state = "TOUCH";
            }
        }
        break;
    case "TOUCH":
        switch(CURRENT_GESTURE){
            case "OFF":
                current_state = "OFF";
                break;
            case "TAP":
                //Add new state
                if(GESTURE_IS_DOUBLE and not ds_list_empty(unused_letters_list)){
                    var new_state = scr_instance_create_depth(mouse_x,mouse_y,depth-1,obj_state);
                    with(new_state){
                        letter = ds_list_find_value(other.unused_letters_list,0);
                        automata_handler = other.id;
                    }
                    var letter_index = ds_list_find_index(unused_letters_list,new_state.letter);
                    ds_list_delete(unused_letters_list,letter_index);
                    selected_object = new_state;
                }
                break;
            case "DRAG":
                //Add start arrow
                if(GESTURE_IS_DOUBLE){
                    with(start_arrow){
                        instance_destroy();
                    }
                    start_arrow = scr_instance_create_depth(mouse_x,mouse_y,depth-1,obj_start_arrow);
                    current_state = "DRAG";
                }
                break;
        }
        break;
    case "DRAG":
        switch(CURRENT_GESTURE){
            case "OFF":
                current_state = "OFF";
                break;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
