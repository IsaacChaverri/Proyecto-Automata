<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_state</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Image Variables
radius = sprite_xoffset;
//Other Variables
current_state = "OFF";
letter = "";
automata_handler = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State
switch(current_state){
    case "OFF":
        image_blend = c_white;
        switch(CURRENT_GESTURE){
            case "TOUCH":
                if(scr_mouse_hovering_object(id,false,false) != noone){
                    current_state = "TOUCH";
                }
                break;
        }
        break;
    case "TOUCH":
        image_blend = c_dkgray;
        switch(CURRENT_GESTURE){
            case "OFF":
                current_state = "OFF";
                break;
            case "DRAG":
                current_state = "DRAG";
                pre_drag_x = x;
                pre_drag_y = y;
                if(GESTURE_IS_DOUBLE){
                    new_transition = scr_instance_create_depth(x,y,depth,obj_transition);
                    with(new_transition){
                        state_1 = other.id;
                    }
                }
                break;
        }
        break;
    case "DRAG":
        if(GESTURE_IS_DOUBLE){
            image_blend = c_dkgray;
            switch(CURRENT_GESTURE){
                case "OFF":
                    current_state = "OFF";
                    break;
            }
        }else{
            x = mouse_x;
            y = mouse_y;
            var drag_state = "OFF";
            var colliding_with_state = false;
            with(obj_state){
                if(id != other.id and instance_place(x,y,obj_state) != noone){
                    colliding_with_state = true;
                }
            }
            if(colliding_with_state or not scr_object_inside_object(id,automata_handler,false)){
                drag_state = "NOT_PLACEABLE";
            }else{
                drag_state = "PLACEABLE";
            }
            switch(drag_state){
                case "PLACEABLE":
                    image_blend = c_green;
                    switch(CURRENT_GESTURE){
                        case "OFF":
                            current_state = "OFF";
                            break;
                    }
                    break;
                case "NOT_PLACEABLE":
                    image_blend = c_red;
                    switch(CURRENT_GESTURE){
                        case "OFF":
                            x = pre_drag_x;
                            y = pre_drag_y;
                            current_state = "OFF";
                            break;
                    }
                    break;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sate

//Self
draw_self();
//Letter
scr_setup_write(fnt_default,fa_center,fa_middle,c_black);
var original_alpha = draw_get_alpha();
draw_set_alpha(image_alpha);
draw_text(x,y,letter);
draw_set_alpha(original_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
