<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Flag Variables
initialized_dependent_variables = false;
//State Variables
current_state = "Idle";
idle_state = "Down";
//Other Variables
torso_dummy = noone;
head_dummy = noone;
legs_dummy = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose State
switch(current_state){
    case "Idle":
        if(instance_exists(torso_dummy) and torso_dummy.robot_button.locked){
            //Move Up and Down
            var neck_y = torso_dummy.y-(torso_dummy.sprite_height/2);
            var neck_height = 20;
            var shoulders_y = neck_y+neck_height;
            switch(idle_state){
                case "Down":
                    with(torso_dummy){
                        y = scr_approach(y,down_y,down_speed);
                        if(y == down_y){
                            other.idle_state = "Up";
                        }
                    }
                    with(head_dummy){
                        y = max(y,neck_y);
                    }
                    break;
                case "Up":
                    with(torso_dummy){
                        y = scr_wave_approach(down_y,top_y,y,up_max_speed,up_min_speed,false);
                        if(y == top_y){
                            other.idle_state = "Down";
                        }
                    }
                    with(head_dummy){
                        y = min(y,shoulders_y);
                    }
                    break;
            }
            //Update robot button position
            with(torso_dummy){
                robot_button.x = x;
                robot_button.y = y;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Dependent Variables
if(not initialized_dependent_variables){
    initialized_dependent_variables = true;
    
    //Create Torso
    var torso_dummy_x = x;
    var torso_dummy_y = y;
    var torso_dummy_depth = depth-1;
    torso_dummy = scr_instance_create_depth(torso_dummy_x,torso_dummy_y,torso_dummy_depth,obj_dummy);
    with(torso_dummy){
        sprite_index = spr_robot_torso;
        top_y = y;
        var robot_legs_height = sprite_get_height(spr_robot_legs);
        var vertical_move_distance = (robot_legs_height/2);
        down_y = top_y+vertical_move_distance;
        down_speed = 5;
        up_max_speed = down_speed*0.75;
        up_min_speed = 1;
    }
    //Create Head
    var head_dummy_x = x;
    var head_dummy_y = torso_dummy.y-(torso_dummy.sprite_height/2);
    var head_dummy_depth = torso_dummy.depth-1;
    head_dummy = scr_instance_create_depth(head_dummy_x,head_dummy_y,head_dummy_depth,obj_dummy);
    with(head_dummy){
        sprite_index = spr_robot_head;
    }
    //Create Legs
    var legs_dummy_x = x;
    var legs_dummy_y = torso_dummy.y+(torso_dummy.sprite_height/2);
    var legs_dummy_depth = torso_dummy.depth+1;
    legs_dummy = scr_instance_create_depth(legs_dummy_x,legs_dummy_y,legs_dummy_depth,obj_dummy);
    with(legs_dummy){
        sprite_index = spr_robot_legs;
    }
    
    //Create Robot Button
    with(torso_dummy){
        var robot_button_x_offset = 0;
        var robot_button_x = x+robot_button_x_offset;
        var robot_button_y_offset = 0;
        var robot_button_y = y+robot_button_y_offset;
        var robot_button_depth = depth-1;
        robot_button = scr_instance_create_depth(robot_button_x,robot_button_y,robot_button_depth,obj_robot_button);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
